// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Content.Shared.SS220.Shlepovend;

namespace Content.Client.SS220.Shlepovend.UI;

[GenerateTypedNameReferences]
public sealed partial class ShlepovendGroup : BoxContainer
{
    // Will have to do that until there is a flexbox/flowcontainer sort of thing
    const int ITEMS_IN_ROW = 5;

    public ShlepovendGroup()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    private List<BoxContainer> _rows = new();
    public List<ShlepovendItemButton> Buttons = new();

    public bool IsAvailable = false;

    private ShlepaRewardGroupPrototype? _group;
    public ShlepaRewardGroupPrototype? Group
    {
        get => _group;
        set
        {
            _group = value;
            if (_group is null)
                return;

            EnsureButtons(_group.Rewards.Count);

            // Set up buttons
            var buttonIdx = 0;
            foreach (var (itemId, price) in _group.Rewards)
            {
                var button = Buttons[buttonIdx];
                button.SetItem(itemId);
                button.Price = price;
                button.Visible = true;
                button.GroupProtoId = _group.ID;

                buttonIdx++;
            }

            // Hide extra buttons
            for (var i = buttonIdx; i < Buttons.Count; i++)
            {
                Buttons[i].Visible = false;
            }

            GroupNameLabel.Text = _group.Name;
        }
    }

    public void AddRow()
    {
        var row = new BoxContainer() { HorizontalExpand = true };

        for (var i = 0; i < ITEMS_IN_ROW; i++)
        {
            var button = new ShlepovendItemButton();
            row.AddChild(button);
            Buttons.Add(button);
        }

        _rows.Add(row);
        RowContainer.AddChild(row);
    }

    public void EnsureButtons(int amount)
    {
        var newButtonsNeeded = amount - Buttons.Count;
        if (newButtonsNeeded <= 0)
            return;

        var rowsNeeded = (int) MathF.Ceiling((float) newButtonsNeeded / ITEMS_IN_ROW);
        for (var i = 0; i < rowsNeeded; i++)
        {
            AddRow();
        }
    }
}
