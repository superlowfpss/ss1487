// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Text;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Prototypes;
using Content.Shared.SS220.SuperMatter.Functions;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.SuperMatter.Ui;

[GenerateTypedNameReferences]
public sealed partial class SuperMatterObserverGasBar : Control
{
    [Dependency] private readonly ILocalizationManager _localization = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public Gas GasId = Gas.Oxygen;
    public Color GasColor = default;
    public string LocalizedGasName = string.Empty;

    public SuperMatterObserverGasBar()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Initialize(Gas gas)
    {
        GasId = gas;
        _prototypeManager.TryIndex<GasPrototype>(((int)GasId).ToString(), out var gasProto);
        LocalizedGasName = _localization.GetString(gasProto == null ? GasId.ToString() : gasProto.Name);
        GasColor = gasProto == null ? Color.ForestGreen : Color.FromHex("#" + gasProto.Color);
        ApplyForeground();
        FillingBar.ToolTip = GetTooltip();
    }
    /// <summary>
    /// This method produce foreground and overrides existed foreground
    /// </summary>
    public void ApplyForeground()
    {
        var foreground = new StyleBoxFlat(GasColor);
        foreground.BorderThickness = new Thickness(2, 2, 0, 4);
        FillingBar.ForegroundStyleBoxOverride = foreground;
    }
    public void UpdateBar(float ratio)
    {
        FillingBar.SetAsRatio(ratio);

        var builder = new StringBuilder();
        builder.AppendJoin(" ", [LocalizedGasName, (ratio * 100f).ToString("N2"), "%"]);
        BarLabel.Text = builder.ToString();
    }

    private string GetTooltip()
    {
        var stringBuilder = new StringBuilder(LocalizedGasName);
        stringBuilder.AppendLine();
        if (SuperMatterGasInteraction.DecayInfluenceGases.TryGetValue(GasId, out var decayInfluence))
            stringBuilder.AppendLine(_localization.GetString("smObserver-decay", ("flat", decayInfluence.flatInfluence.ToString("N0")), ("relative", (decayInfluence.RelativeInfluence * 100f).ToString("N2"))));
        if (SuperMatterGasInteraction.GasesToMatterConvertRatio.TryGetValue(GasId, out var gassesToMatter))
            stringBuilder.AppendLine(_localization.GetString("smObserver-gasToMatter", ("value", gassesToMatter.ToString("N0"))));
        if (SuperMatterGasInteraction.EnergyEfficiencyChangerGases.TryGetValue(GasId, out var energyInfluence))
            stringBuilder.AppendLine(_localization.GetString("smObserver-energyInfluence", ("optimalRatio", (energyInfluence.OptimalRatio * 100f).ToString("N0")), ("relative", ((energyInfluence.RelativeInfluence + 1) * 100).ToString("N0"))));

        return stringBuilder.ToString();
    }
}


