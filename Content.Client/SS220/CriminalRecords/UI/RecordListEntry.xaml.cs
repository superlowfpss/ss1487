// © SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.Message;
using Content.Shared.Roles;
using Content.Shared.SS220.CriminalRecords;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class RecordListEntry : PanelContainer
{
    private readonly IPrototypeManager _prototype;
    private readonly SpriteSystem _sprite;
    private readonly RecordList? _parent;

    public object? Metadata { get; set; }

    public bool MouseIsHovering { get; private set; } = false;
    private bool _isDown = false;
    private bool _selection_visuals = false;

    private readonly StyleBoxFlat _styleBox = new();

    public event Action<GUIBoundKeyEventArgs, RecordListEntry>? Pressed;
    public event Action<GUIBoundKeyEventArgs, RecordListEntry>? Unpressed;
    public event Action<GUIMouseHoverEventArgs, RecordListEntry>? Hover;

    // Visuals
    public Color DefaultBgColor = Color.FromHex("#1C1C21");
    public Color HoverBgColor = Color.FromHex("#303035");
    public Color SelectedBgColor = Color.FromHex("#25252A");

    public RecordListEntry()
    {
        RobustXamlLoader.Load(this);

        _prototype = IoCManager.Resolve<IPrototypeManager>();
        _sprite = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();

        PanelOverride = _styleBox;

        SetupInputs();
        UpdateVisuals();
    }

    public RecordListEntry(IPrototypeManager protoMan, SpriteSystem spriteSys, RecordList? parentList)
    {
        RobustXamlLoader.Load(this);

        _prototype = protoMan;
        _sprite = spriteSys;
        _parent = parentList;

        PanelOverride = _styleBox;

        SetupInputs();
        UpdateVisuals();
    }

    private void SetupInputs()
    {
        OnKeyBindDown += OnButtonPressed;
        OnKeyBindUp += OnButtonUnpressed;

        OnMouseEntered += _ =>
        {
            MouseIsHovering = true;
            UpdateVisuals();
        };
        OnMouseEntered += OnButtonHover;

        OnMouseExited += _ =>
        {
            MouseIsHovering = false;
            UpdateVisuals();
        };
    }

    public void UpdateVisuals()
    {
        Color bg;

        if (MouseIsHovering)
            bg = HoverBgColor;
        else if (_selection_visuals)
            bg = SelectedBgColor;
        else
            bg = DefaultBgColor;

        _styleBox.BackgroundColor = bg;
    }

    public void SetSelectionVisuals(bool selected)
    {
        _selection_visuals = selected;
        UpdateVisuals();
    }

    public void SetupEntry(CriminalRecordShort record, RecordList.FilterMatchType matchType)
    {
        NameLabel.Text = record.Name;

        // Setup job title
        if (record.JobPrototype != null)
        {
            var jobProto = _prototype.Index<JobPrototype>(record.JobPrototype);
            var color = GetJobColor(record.JobPrototype);
            JobLabel.SetMarkup($"[color={color}]{jobProto.LocalizedName}[/color]");

            var iconProto = _prototype.Index(jobProto.Icon);
            JobIcon.Texture = _sprite.Frame0(iconProto.Icon);
        }

        // Setup bottom string
        var msg = new FormattedMessage();
        if (matchType == RecordList.FilterMatchType.Default)
        {
            if (record.LastCriminalRecord != null && record.LastCriminalRecord.RecordType != null)
            {
                var statusType = _prototype.Index<CriminalStatusPrototype>(record.LastCriminalRecord.RecordType);
                msg.AddMarkup($"[color={statusType.Color.ToHex()}][bold]{statusType.Name}[/bold][/color]: ");
                msg.AddText(record.LastCriminalRecord.Message);
                CriminalStatusNote.Visible = true;
            }
            else
            {
                CriminalStatusNote.Visible = false;
            }
        }
        else if (matchType == RecordList.FilterMatchType.DNA)
        {
            msg.PushColor(Color.White);
            msg.AddText("ДНК: " + record.DNA);
            msg.Pop();
            CriminalStatusNote.Visible = true;
        }
        else if (matchType == RecordList.FilterMatchType.Fingerprint)
        {
            msg.PushColor(Color.White);
            msg.AddText("Отпечаток: " + record.Fingerprints);
            msg.Pop();
            CriminalStatusNote.Visible = true;
        }

        CriminalStatusNote.SetMessage(msg);
    }

    const float ADDITIONAL_COLOR_CHANNEL_VALUE = 0.25f;

    private string GetJobColor(string jobPrototypeId)
    {
        var departments = _prototype.EnumeratePrototypes<DepartmentPrototype>().ToList();
        departments.Sort((a, b) => a.Sort.CompareTo(b.Sort));

        foreach (var department in from department in departments
            from jobId in department.Roles
            where jobId == jobPrototypeId
            select department)
        {
            // make brighter cuz pure red/blue are too dark to be readable
            var color = department.Color;
            color = color.WithRed(MathF.Min(color.R + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            color = color.WithGreen(MathF.Min(color.G + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            color = color.WithBlue(MathF.Min(color.B + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            return color.ToHex();
        }

        return Color.White.ToHex();
    }

    private void OnButtonPressed(GUIBoundKeyEventArgs args)
    {
        if (_isDown)
            return;

        _isDown = true;
        Pressed?.Invoke(args, this);
    }

    private void OnButtonUnpressed(GUIBoundKeyEventArgs args)
    {
        if (!_isDown)
            return;

        _isDown = false;
        Unpressed?.Invoke(args, this);
    }

    private void OnButtonHover(GUIMouseHoverEventArgs args)
    {
        Hover?.Invoke(args, this);
    }
}
